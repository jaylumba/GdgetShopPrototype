package jcl.com.gadgetshop.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCT".
*/
public class ProductDao extends AbstractDao<Product, Long> {

    public static final String TABLENAME = "PRODUCT";

    /**
     * Properties of entity Product.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PicResId = new Property(1, int.class, "picResId", false, "PIC_RES_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Price = new Property(3, double.class, "price", false, "PRICE");
        public final static Property DateRelease = new Property(4, String.class, "dateRelease", false, "DATE_RELEASE");
        public final static Property Weight = new Property(5, String.class, "weight", false, "WEIGHT");
        public final static Property Os = new Property(6, String.class, "os", false, "OS");
        public final static Property Storage = new Property(7, String.class, "storage", false, "STORAGE");
        public final static Property Display = new Property(8, String.class, "display", false, "DISPLAY");
        public final static Property Camera = new Property(9, String.class, "camera", false, "CAMERA");
        public final static Property Ram = new Property(10, String.class, "ram", false, "RAM");
        public final static Property Battery = new Property(11, String.class, "battery", false, "BATTERY");
        public final static Property Category = new Property(12, String.class, "category", false, "CATEGORY");
    }


    public ProductDao(DaoConfig config) {
        super(config);
    }
    
    public ProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PIC_RES_ID\" INTEGER NOT NULL ," + // 1: picResId
                "\"NAME\" TEXT," + // 2: name
                "\"PRICE\" REAL NOT NULL ," + // 3: price
                "\"DATE_RELEASE\" TEXT," + // 4: dateRelease
                "\"WEIGHT\" TEXT," + // 5: weight
                "\"OS\" TEXT," + // 6: os
                "\"STORAGE\" TEXT," + // 7: storage
                "\"DISPLAY\" TEXT," + // 8: display
                "\"CAMERA\" TEXT," + // 9: camera
                "\"RAM\" TEXT," + // 10: ram
                "\"BATTERY\" TEXT," + // 11: battery
                "\"CATEGORY\" TEXT);"); // 12: category
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Product entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPicResId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindDouble(4, entity.getPrice());
 
        String dateRelease = entity.getDateRelease();
        if (dateRelease != null) {
            stmt.bindString(5, dateRelease);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(6, weight);
        }
 
        String os = entity.getOs();
        if (os != null) {
            stmt.bindString(7, os);
        }
 
        String storage = entity.getStorage();
        if (storage != null) {
            stmt.bindString(8, storage);
        }
 
        String display = entity.getDisplay();
        if (display != null) {
            stmt.bindString(9, display);
        }
 
        String camera = entity.getCamera();
        if (camera != null) {
            stmt.bindString(10, camera);
        }
 
        String ram = entity.getRam();
        if (ram != null) {
            stmt.bindString(11, ram);
        }
 
        String battery = entity.getBattery();
        if (battery != null) {
            stmt.bindString(12, battery);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(13, category);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Product entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPicResId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindDouble(4, entity.getPrice());
 
        String dateRelease = entity.getDateRelease();
        if (dateRelease != null) {
            stmt.bindString(5, dateRelease);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(6, weight);
        }
 
        String os = entity.getOs();
        if (os != null) {
            stmt.bindString(7, os);
        }
 
        String storage = entity.getStorage();
        if (storage != null) {
            stmt.bindString(8, storage);
        }
 
        String display = entity.getDisplay();
        if (display != null) {
            stmt.bindString(9, display);
        }
 
        String camera = entity.getCamera();
        if (camera != null) {
            stmt.bindString(10, camera);
        }
 
        String ram = entity.getRam();
        if (ram != null) {
            stmt.bindString(11, ram);
        }
 
        String battery = entity.getBattery();
        if (battery != null) {
            stmt.bindString(12, battery);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(13, category);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Product readEntity(Cursor cursor, int offset) {
        Product entity = new Product( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // picResId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getDouble(offset + 3), // price
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dateRelease
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // weight
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // os
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // storage
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // display
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // camera
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ram
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // battery
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // category
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Product entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPicResId(cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPrice(cursor.getDouble(offset + 3));
        entity.setDateRelease(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWeight(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOs(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStorage(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDisplay(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCamera(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRam(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBattery(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCategory(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Product entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Product entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Product entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
