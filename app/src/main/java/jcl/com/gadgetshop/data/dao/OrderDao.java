package jcl.com.gadgetshop.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER".
*/
public class OrderDao extends AbstractDao<Order, Long> {

    public static final String TABLENAME = "ORDER";

    /**
     * Properties of entity Order.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property ShippingInfo = new Property(2, Long.class, "shippingInfo", false, "SHIPPING_INFO");
        public final static Property PaymentInfoId = new Property(3, Long.class, "paymentInfoId", false, "PAYMENT_INFO_ID");
        public final static Property TotalPrice = new Property(4, double.class, "totalPrice", false, "TOTAL_PRICE");
        public final static Property TransactionDate = new Property(5, java.util.Date.class, "transactionDate", false, "TRANSACTION_DATE");
        public final static Property Status = new Property(6, String.class, "status", false, "STATUS");
    }


    public OrderDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"SHIPPING_INFO\" INTEGER," + // 2: shippingInfo
                "\"PAYMENT_INFO_ID\" INTEGER," + // 3: paymentInfoId
                "\"TOTAL_PRICE\" REAL NOT NULL ," + // 4: totalPrice
                "\"TRANSACTION_DATE\" INTEGER," + // 5: transactionDate
                "\"STATUS\" TEXT);"); // 6: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Order entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        Long shippingInfo = entity.getShippingInfo();
        if (shippingInfo != null) {
            stmt.bindLong(3, shippingInfo);
        }
 
        Long paymentInfoId = entity.getPaymentInfoId();
        if (paymentInfoId != null) {
            stmt.bindLong(4, paymentInfoId);
        }
        stmt.bindDouble(5, entity.getTotalPrice());
 
        java.util.Date transactionDate = entity.getTransactionDate();
        if (transactionDate != null) {
            stmt.bindLong(6, transactionDate.getTime());
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(7, status);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Order entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        Long shippingInfo = entity.getShippingInfo();
        if (shippingInfo != null) {
            stmt.bindLong(3, shippingInfo);
        }
 
        Long paymentInfoId = entity.getPaymentInfoId();
        if (paymentInfoId != null) {
            stmt.bindLong(4, paymentInfoId);
        }
        stmt.bindDouble(5, entity.getTotalPrice());
 
        java.util.Date transactionDate = entity.getTransactionDate();
        if (transactionDate != null) {
            stmt.bindLong(6, transactionDate.getTime());
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(7, status);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Order readEntity(Cursor cursor, int offset) {
        Order entity = new Order( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // shippingInfo
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // paymentInfoId
            cursor.getDouble(offset + 4), // totalPrice
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // transactionDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Order entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setShippingInfo(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setPaymentInfoId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setTotalPrice(cursor.getDouble(offset + 4));
        entity.setTransactionDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setStatus(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Order entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Order entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Order entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
