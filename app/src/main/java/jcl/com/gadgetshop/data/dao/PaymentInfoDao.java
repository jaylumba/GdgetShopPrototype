package jcl.com.gadgetshop.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PAYMENT_INFO".
*/
public class PaymentInfoDao extends AbstractDao<PaymentInfo, Long> {

    public static final String TABLENAME = "PAYMENT_INFO";

    /**
     * Properties of entity PaymentInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CardHoldersName = new Property(1, String.class, "cardHoldersName", false, "CARD_HOLDERS_NAME");
        public final static Property CardNumber = new Property(2, String.class, "cardNumber", false, "CARD_NUMBER");
        public final static Property ExpriryDate = new Property(3, String.class, "expriryDate", false, "EXPRIRY_DATE");
        public final static Property Cvv = new Property(4, String.class, "cvv", false, "CVV");
    }


    public PaymentInfoDao(DaoConfig config) {
        super(config);
    }
    
    public PaymentInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PAYMENT_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CARD_HOLDERS_NAME\" TEXT," + // 1: cardHoldersName
                "\"CARD_NUMBER\" TEXT," + // 2: cardNumber
                "\"EXPRIRY_DATE\" TEXT," + // 3: expriryDate
                "\"CVV\" TEXT);"); // 4: cvv
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PAYMENT_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PaymentInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cardHoldersName = entity.getCardHoldersName();
        if (cardHoldersName != null) {
            stmt.bindString(2, cardHoldersName);
        }
 
        String cardNumber = entity.getCardNumber();
        if (cardNumber != null) {
            stmt.bindString(3, cardNumber);
        }
 
        String expriryDate = entity.getExpriryDate();
        if (expriryDate != null) {
            stmt.bindString(4, expriryDate);
        }
 
        String cvv = entity.getCvv();
        if (cvv != null) {
            stmt.bindString(5, cvv);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PaymentInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cardHoldersName = entity.getCardHoldersName();
        if (cardHoldersName != null) {
            stmt.bindString(2, cardHoldersName);
        }
 
        String cardNumber = entity.getCardNumber();
        if (cardNumber != null) {
            stmt.bindString(3, cardNumber);
        }
 
        String expriryDate = entity.getExpriryDate();
        if (expriryDate != null) {
            stmt.bindString(4, expriryDate);
        }
 
        String cvv = entity.getCvv();
        if (cvv != null) {
            stmt.bindString(5, cvv);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PaymentInfo readEntity(Cursor cursor, int offset) {
        PaymentInfo entity = new PaymentInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cardHoldersName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cardNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // expriryDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // cvv
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PaymentInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCardHoldersName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCardNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setExpriryDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCvv(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PaymentInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PaymentInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PaymentInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
